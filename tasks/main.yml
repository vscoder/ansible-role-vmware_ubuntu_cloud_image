---
# tasks file for vmware_ubuntu_cloud_image

- name: ensure mandatory connection parameters are given
  fail:
    msg: "At least one of 'ssh_keys' and 'password' must be given"
  when: ssh_keys is undefined and password is undefined
  run_once: true

- name: Find Guest's Folder using name
  vmware_guest_find:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    name: "{{ vm_guestname }}"
  delegate_to: localhost
  failed_when: false
  register: vm_found
  when: replace_existing_vm

- name: Poweroff VM "{{ vm_guestname }}" if exists
  vmware_guest:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    name: "{{ vm_guestname }}"
    state: poweredoff
  delegate_to: localhost
  when: replace_existing_vm and 'folders' in vm_found and vm_found.folders | length == 1

- name: Remove VM "{{ vm_guestname }}"
  vmware_guest:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    name: "{{ vm_guestname }}"
    state: absent
  delegate_to: localhost
  when: replace_existing_vm and 'folders' in vm_found and vm_found.folders | length == 1

- name: deploy OVA file
  tags: deploy-ova
  vmware_deploy_ovf:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    datacenter: "{{ vmware_datacenter }}"
    datastore: "{{ vmware_datastore }}"
    resource_pool: "{{ vmware_resource_pool | default(omit) }}"
    networks: "{{ vmware_networks | default(omit) }}"
    allow_duplicates: no
    ova: "{{ ova_file }}"
    name: "{{ vm_guestname }}"
    properties:
      hostname: "{{ vm_hostname }}"
      user-data: "{{ lookup('template', 'user-data.j2') | b64encode }}"
    power_on: no
  delegate_to: localhost

- name: configure VM hardware
  tags: configure-hardware
  vmware_guest:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    name: "{{ vm_guestname }}"
    hardware: "{{ hardware }}"
    state: present
  delegate_to: localhost
  when: hardware is defined

- name: configure hard disks
  tags: configure-hardware
  vmware_guest_disk:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    datacenter: "{{ vmware_datacenter }}"
    name: "{{ vm_guestname }}"
    disk: "{{ disk | default(omit) }}"
  delegate_to: localhost

- name: start VM
  tags: start-vm
  vmware_guest:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    name: "{{ vm_guestname }}"
    state: poweredon
    wait_for_ip_address: yes
  delegate_to: localhost

- name: "Wait {{ poweron_timeout }} seconds for target connection to become reachable/usable"
  wait_for_connection:
    timeout: "{{ poweron_timeout }}"
  when: force_static_ipv4

- name: gather vm facts
  vmware_guest_facts:
    hostname: "{{ vcenter_hostname | default(omit) }}"
    username: "{{ vcenter_username | default(omit) }}"
    password: "{{ vcenter_password | default(omit) }}"
    validate_certs: "{{ vcenter_validate_certs | default(omit) }}"
    datacenter: "{{ vmware_datacenter }}"
    name: "{{ vm_guestname }}"
  delegate_to: localhost
  register: vm_facts

- name: use current IP address (from vm facts)
  set_fact:
    ansible_ssh_host: "{{ vm_facts.instance.ipv4 }}"

- name: apply static IP configuration
  include: configure-network.yml
  when: static_ip is defined

- name: gather host facts
  setup:
# vim: ts=2:sw=2:noautoindent:nosmartindent
